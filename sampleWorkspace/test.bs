import std;
// a comment here :) 

/*
a block comment 
*/

// empty block, this should work too!!
/**/
type THIS_SHOULD_BE_HIGHLIGHTED {
    J {}
}

/**
* this is a documentation comment
* @description A test type
* @author test
*/
type T {
// TODO is in type T {S {}} S or T a struct name?
    S {
        // this comment should be allowed
        n: U32,
        /*
        This comment too
        */
        b: Bool,
    },
    U {
        /** And specially these too
        * @description a struct field description
        */
        s1: S,
        s2: S,
    },
    A {
        s1: [Bool;5],
        s2: [U32],
        s3: Function(Bool),
        t3: Function(Bool, Char),
        r3: Function(Bool, Function(Char, U32)),
        s4: mutable S,
        r4: -> S,
        z4: Function(Char) ~> Char,
        s5: mutable -> mutable Function([U32; 1]),
        s6: [[[Bool; 9]; 9]],
    },
    Empty {},
}

namespace test {
    //test namespace
    //TODO: is an export keyword possible here?
    type T {
        U{
            h:Function(U32) ~> Nothing,
        },
    }
}


function get_array() ~> [Bool; 4]{
    return [false, false, true, false];
}

function main() ~> Nothing {
    let a: U32 = 4_200;
    let b: Bool = false;
    let c : Bool = true;
    std::assert(not b);
    let d: Char = 'a';
    '\n';
    ' ';
    '\\';
    '\'';
    '~';
    '"';
    let ptr: mutable Function(U32) ~> Bool = f;
    let ptr2: mutable -> mutable U32 = a@;
    //TODO: is there a nullptr or similar keyword?
    let long_ptr: -> -> -> -> U32 = 0;
    let functions = [f, g, f, f, f, g];
    let num_functions = value_size(functions) / value_size(functions[0]);

     for ;; {
        break;
        continue;
        let i: U32 = 0;
    }

     if n > 4 {
        bsm {
            checkpoint 1
        }
    } else {
        bsm {
            checkpoint 3
        }
    }

     if n > 4 {
        bsm {
            checkpoint 1
        }
    } else {
        bsm {
            checkpoint 3
        }
    }

}

export function assert(condition: Bool) {
    // some comment here
    bsm {
        copy_byte *R0, R1
        assert R1, 1
    }
    /*
    a multiline comment with * in it and also /*
    */
}

//TODO: is this valid syntax (the default value for the parameter?)
function def(hello: Char = '\n') ~> Char {
    //TODO: is this syntax valid?
    let u, i,o : Char;

}



namespace std {

    function assert_equals(lhs: Nothing, rhs: Nothing) { }

    export function swap(lhs: ->mutable U32, rhs: ->mutable U32) {
            let temp: U32 = lhs!;
            lhs! = rhs!;
            rhs! = temp;
    }


    function a() ~> Nothing {
        return nothing;
    }



}