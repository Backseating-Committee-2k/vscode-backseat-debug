import std;
// a comment here :) 

/*
a block comment 
*/

// empty block, this should work too!!
/**/
type THIS_SHOULD_BE_HIGHLIGHTED {
    J {}
}

/**
* this is a documentation comment
* @description A test type
* @author test
*/
type T {
//TODO is in type T {S {}} S or T a struct name?
    S {
        // this comment should be allowed
        n: U32,
        /*
        This comment too
        */
        b: Bool,
    },
    U {
        /** And specially these too
        * @description a struct field description
        */
        s1: S,
        s2: S,
    },
    A {
        s1: [Bool;5],
        s2: [U32],
        s3: Function(Bool),
        t3: Function(Bool, Char),
        r3: Function(Bool, Function(Char, U32)),
        s4: mutable S,
        r4: -> S,
        z4: Function(Char) ~> Char,
        w4: Function(Char, U32) ~> (Function(S) ~> (Function([Bool; 8]) ~> Nothing)),
        s5: mutable -> mutable Function([U32; 1]),
        s6: [[[Bool; 9]; 9]],
    },
    Empty {},
}

namespace test {
    //test namespace
    //TODO: is an export keyword possible here?
    type T {
        U{
            h:Function(U32) ~> Nothing,
        },
    }
}

//TODO allow unicode identifier
/* 
function ðŸŽ…(){
    return 24;
} */


function simple(a: Char){
    //nothing here
}

export function test() ~> U32{
    //TODO char literals syntax highlighting is broken somehow  :(
   // return '\0';
   // TODO the range of chars is not enough for 'Ã¼'!!
    return 'Ã¼';
}

export function test2() ~> U32{
    return 4324_32;
}

export function test3() ~> U32{
    return get_u32('s',  987_2. test(),var);
}


export function get_array() ~> [Bool; 4]{
    bsm {
            checkpoint 3
    }
    return [false, false, true, false];
}

function complex_fn(fn_input: Function(Char, Bool) ~> [Bool]) ~> (Function(U32) ~> [Bool; 8]){
    return get_array;
}

//TODO how do function literals look, if they even exist (likely not!)
function defaults(c: Char = '\n', f:U32 = 4_232_321, a : [Bool; 2] = [false, true], h:S = S{n:4,b:false}, n:Nothing = nothing) ~> [Nothing; 3]{
    return [nothing, nothing, nothing];  
}

//TODO string literals are not supported atm!
/*
function get_string() ~> String {
    return "test with \" escape and \t \n \0 \\";
}

*/

function main() ~> Nothing {
    let a: U32 = 4_200;
    let b: Bool = false;
    let c : Bool = true;
    std::assert(not b);
    let d: Char = 'a';
    '\n';
    ' ';
    '\\';
    '\'';
    '~';
    '"';
    let ptr: mutable Function(U32) ~> Bool = f;
    let ptr2: mutable -> mutable U32 = a@;
    //TODO: is there a nullptr or similar keyword?
    let long_ptr: -> -> -> -> U32 = 0;
    let functions = [f, g, f, f, f, g];
    let num_functions = value_size(functions) / value_size(functions[0]);
    let func_with_return : Function(U32) ~> Nothing;

     for ;; {
        break;
        continue;
        let i: U32 = 0;
    }

     if n > 4 {
        bsm {
            checkpoint 1
        }
    } else {
        bsm {
            checkpoint 3
        }
    }

     if n > 4 {
        bsm {
            checkpoint 1
        }
    } else {
        bsm {
            checkpoint 3
        }
    }

}

export function assert(condition: Bool) {
    // some comment here
    bsm {
        copy_byte *R0, R1
        assert R1, 1
    }
    /*
    a multiline comment with * in it and also /* (this is not ok for seatbelt v1 ?!?!?)
    */
}

//TODO: is this valid syntax (the default value for the parameter?)
function def(hello: Char = '\n') ~> Char {
    //TODO: is this syntax valid?
    let u, i,o : Char;

}



namespace std {

    function assert_equals(lhs: Nothing, rhs: Nothing) { }

    export function swap(lhs: ->mutable U32, rhs: ->mutable U32) {
            let temp: U32 = lhs!;
            lhs! = rhs!;
            rhs! = temp;
    }


    function a() ~> Nothing {
        return nothing;
    }



}

// TODO let basic
/*
statements
expressions: 
array literals
struct literal
default parameters
function type with real () and (~> (~>)) etc. 
*/