{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "bssembler",
    "scopeName": "source.bssembler",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#labels"
        },
        {
            "include": "#registers"
        },
        {
            "include": "#words"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#comments"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                "name": "keyword.control.bssembler",
                "match": "(?i)(\\b(ADD|ADD_CARRY|AND|ASSERT|CALL|CHECKPOINT|COMP|COMP_EQ|COMP_GE|COMP_GT|COMP_LE|COMP_LT|COMP_NEQ|COPY|COPY_BYTE|COPY_HALFWORD|DEBUG_BREAK|DIVMOD|DRAW_BUFFER_ADDR|DUMP_MEMORY|DUMP_REGISTERS|GET_KEY|HALT|JUMP|JUMP_CARRY|JUMP_DIVIDE_BY_ZERO|JUMP_EQ|JUMP_GT|JUMP_GTEQ|JUMP_LT|JUMP_LTEQ|JUMP_NOT_CARRY|JUMP_NOT_DIVIDE_BY_ZERO|JUMP_NOT_ZERO|JUMP_ZERO|LSHIFT|MULT|NOOP|NOT|OFFSET_COPY|OFFSET_COPY_BYTE|OFFSET_COPY_HALFWORD|OR|POLL_CYCLES|POLL_TIME|POP|PRINT|PUSH|RETURN|RSHIFT|SUB|SUB_CARRY|SWAP|XOR)\\b)|(\\.string|\\.bytes)(?-i)"
            }]
        },
        "strings": {
            "name": "string.quoted.double.bssembler",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.bssembler",
                    "match": "\\\\."
                }
            ]
        },
        "labels": {
            "patterns": [
                {
                    "name": "entity.name.tag",
                    "match": "((\\$\"[ -~]*\")|([a-zA-Z_\\$%][a-zA-Z_\\$%0-9\\-]*))\\s*:"
                }
            ]
        },
        "registers": {
            "patterns": [
                {
                    "name": "variable",
                    "match": "(?i)(\\*?r\\d+)|sp|ip(?-i)"
                }
            ]
        },
        "words": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "(0x[0-9A-Fa-f]+)|(0b[01]+)|(\\d+)"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "constant.language",
                    "match": "((\\$\"[ -~]*\")|([a-zA-Z_\\$%][a-zA-Z_\\$%0-9\\-]*))"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*"
                }
            ]
        }
    }
}
