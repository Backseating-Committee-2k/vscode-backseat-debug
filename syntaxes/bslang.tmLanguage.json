{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Backseat language",
    "scopeName": "source.bslang",
    "foldingStartMarker": "{",
    "foldingStopMarker": "}",
    "TODO": "this is just WIP, it has to be improved a lot!",
    "regex-docs": "https://macromates.com/manual/en/regular_expressions",
    "patterns": [
        {
            "include": "#import"
        },
        {
            "include": "#struct"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#function"
        },
        {
            "include": "#namespace"
        }
    ],
    "repository": {
        "import": {
            "name": "entity.import.bslang",
            "begin": "(import)\\s+",
            "end": "(;)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.import.bslang"
                }
            },
            "patterns": [
                {
                    "name": "entity.import.bslang",
                    "match": "([a-z][a-zA-Z0-9_]*)(?:(\\.)|(?=\\s*;))",
                    "captures": {
                        "1": {
                            "name": "string.quoted.other.import.bslang"
                        },
                        "2": {
                            "name": "keyword.operator.inport.seperator.bslang"
                        }
                    }
                }
            ]
        },
        "struct": {
            "begin": "(type)\\s+([A-Z][a-zA-Z0-9_]*)\\s*({)",
            "end": "(})",
            "name": "entity.struct.bslang",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.type.bslang"
                },
                "2": {
                    "name": "entity.name.type.bslang"
                },
                "3": {
                    "name": "punctuation.definition.type.begin.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.type.end.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#struct_member"
                },
                {
                    "include": "#comment"
                }
            ]
        },
        "struct_member": {
            "begin": "\\s*([A-Z][a-zA-Z0-9_]*)\\s*({)",
            "end": "(})\\s*(,)",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.bslang"
                },
                "2": {
                    "name": "punctuation.definition.struct.member.begin.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.struct.member.end.bslang"
                },
                "2": {
                    "name": "punctuation.separator.comma.struct.member.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#struct_member_field"
                }
            ]
        },
        "struct_member_field": {
            "begin": "\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)\\s*",
            "name": "entity.struct_field.bslang",
            "end": "(?=\\s*})|(?:(,)(?=$|\\b))",
            "beginCaptures": {
                "1": {
                    "name": "variable.name.struct_field.bslang"
                },
                "2": {
                    "name": "punctuation.separator.colon.struct.field.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.struct.field.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                }
            ]
        },
        "type": {
            "name": "entity.name.type.top_level.bslang",
            "patterns": [
                {
                    "include": "#builtin_type"
                },
                {
                    "include": "#mutable_type"
                },
                {
                    "include": "#pointer_type"
                },
                {
                    "include": "#custom_type"
                }
            ]
        },
        "builtin_type": {
            "patterns": [
                {
                    "name": "entity.name.type.builtin.bslang",
                    "match": "(U32|Char|Bool|Nothing)"
                },
                {
                    "include": "#function_type"
                },
                {
                    "include": "#array_type"
                }
            ]
        },
        "function_type": {
            "patterns": [
                {
                    "include": "#function_type_with_return"
                },
                {
                    "include": "#function_type_without_return"
                }
            ]
        },
        "function_type_without_return": {
            "patterns": [
                {
                    "name": "entity.name.type.function.bslang",
                    "begin": "(Function)(\\()",
                    "end": "(\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.function.keyword.bslang"
                        },
                        "2": {
                            "name": "punctuation.definition.type.function.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.type.function.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "begin": "(,)",
                            "end": ".{0}",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.separator.comma.function.parameters.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#type"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "function_type_with_return": {
            "patterns": [
                {
                    "name": "entity.name.type.function.with_return.bslang",
                    "begin": "(Function)(\\()(?=[^\n]*\\)\\s*~>).{0}",
                    "end": "(?<=~>\\s*[^\n]*).{0}(?=(.?\\s*$)|(?:\\s*(?:{|;|=))|(\\)(?!\\s*~>)))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.function.keyword.bslang"
                        },
                        "2": {
                            "name": "punctuation.definition.type.function.with_return.begin.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "begin": "(,)",
                            "end": ".{0}",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.separator.comma.function.parameters.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#type"
                                }
                            ]
                        },
                        {
                            "name": "entity.name.type.function.return_type.bslang",
                            "begin": "(\\))\\s*(~>)",
                            "end": ".{0}",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.definition.type.function.with_return.end.bslang"
                                },
                                "2": {
                                    "name": "keyword.operator.return_type.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#bracket_type"
                                },
                                {
                                    "include": "#type"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "bracket_type": {
            "patterns": [
                {
                    "name": "entity.bracket.type.expression.bslang",
                    "begin": "(\\()",
                    "end": "(\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.brace.round.type.expression.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "meta.brace.round.type.expression.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "array_type": {
            "patterns": [
                {
                    "name": "entity.name.type.array.bslang",
                    "begin": "(\\[)",
                    "end": "(\\])",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.type.array.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.type.array.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "include": "#array_with_length"
                        }
                    ]
                }
            ]
        },
        "array_with_length": {
            "patterns": [
                {
                    "name": "entity.name.type.array.with_length.bslang",
                    "begin": ".{0}",
                    "end": "(;)\\s*(\\d+)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.type.array.with_length.bslang"
                        },
                        "2": {
                            "name": "constant.numeric.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "mutable_type": {
            "patterns": [
                {
                    "name": "entity.name.type.mutable.bslang",
                    "begin": "(mutable)\\s+",
                    "end": ".{0}",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.mutable.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "pointer_type": {
            "patterns": [
                {
                    "name": "entity.name.type.pointer.bslang",
                    "begin": "(->)\\s*",
                    "end": ".{0}",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.pointer.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "custom_type": {
            "patterns": [
                {
                    "name": "entity.name.type.custom.bslang",
                    "match": "([A-Z][a-zA-Z0-9_]*)"
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.bslang",
                    "match": "^\\s*//.*"
                },
                {
                    "name": "comment.block.block.empty.bslang",
                    "match": "/\\**/"
                },
                {
                    "name": "comment.block.documentation.bslang",
                    "begin": "/\\*{2}",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "match": ".+?(?=\\*/)"
                        },
                        {
                            "include": "#bs_doc"
                        }
                    ]
                },
                {
                    "name": "comment.block.bslang",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "match": ".+?(?=\\*/)"
                        }
                    ]
                }
            ]
        },
        "bs_doc": {
            "patterns": [
                {
                    "name": "comment.block.documentation.bs_doc",
                    "match": "\\s*\\*\\s+(@)([a-z][a-zA-Z0-9_\\.]*)\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.decorator.bs_doc"
                        },
                        "2": {
                            "name": "storage.type.class.bs_doc"
                        },
                        "3": {
                            "name": "comment.block.documentation.bs_doc.raw"
                        }
                    }
                },
                {
                    "name": "comment.block.documentation.bslang",
                    "match": "\\s*\\*\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "comment.block.documentation.bslang"
                        }
                    }
                }
            ]
        },
        "function": {
            "patterns": [
                {
                    "name": "entity.function.bslang",
                    "begin": "^\\s*?((export)?\\s+)?(function)\\s+([a-z][a-zA-Z0-9_]*)\\s*?(?=\\()",
                    "end": "(?<=})",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.export.bslang"
                        },
                        "3": {
                            "name": "storage.type.function.bslang"
                        },
                        "4": {
                            "name": "entity.name.function.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function_definition"
                        },
                        {
                            "include": "#function_body"
                        }
                    ]
                }
            ]
        },
        "function_definition": {
            "patterns": [
                {
                    "name": "entity.function.definition.bslang",
                    "begin": "(?<=[a-zA-Z0-9_]\\s*?).{0}(?=\\()",
                    "end": "(?=(?>{)).{0}",
                    "patterns": [
                        {
                            "include": "#function_definition_with_return_type"
                        },
                        {
                            "include": "#function_definition_without_return_type"
                        }
                    ]
                }
            ]
        },
        "function_definition_with_return_type": {
            "name": "entity.function.definition.with_return_type.bslang",
            "begin": "(?<=[a-zA-Z0-9_]\\s*?).{0}(?=[^\n]*~>)",
            "end": "(?={).{0}",
            "patterns": [
                {
                    "begin": "(?<=[a-zA-Z0-9_]\\s*?).{0}(?=\\()",
                    "end": "(?=~>).{0}(?!\\s*?{)",
                    "patterns": [
                        {
                            "include": "#function_argument_list"
                        }
                    ]
                },
                {
                    "name": "entity.name.function.return_type.bslang",
                    "begin": "(~>)",
                    "end": "(?={)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.return_type.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#type"
                        },
                        {
                            "include": "#bracket_type"
                        }
                    ]
                }
            ]
        },
        "function_definition_without_return_type": {
            "name": "entity.function.definition.without_return_type.bslang",
            "begin": "(?=\\().{0}",
            "end": "(?={).{0}",
            "patterns": [
                {
                    "include": "#function_argument_list"
                }
            ]
        },
        "function_argument_list": {
            "patterns": [
                {
                    "name": "entity.function.argument_list.bslang",
                    "begin": "(\\()",
                    "end": "(\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.defintion.paramters.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.defintion.paramters.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function_parameter"
                        }
                    ]
                }
            ]
        },
        "function_parameter": {
            "patterns": [
                {
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)\\s*",
                    "name": "entity.function.function_parameter.bslang",
                    "end": "(,)|(?=\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.parameter.name.bslang"
                        },
                        "2": {
                            "name": "punctuation.separator.colon.paramter.type.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.comma.function.paramter.bslang"
                        }
                    },

                    "patterns": [
                        {
                            "include": "#function_parameter_with_default"
                        },
                        {
                            "name": "entity.function.function_parameter.with_default.bslang",
                            "begin": "(?<=:\\s*)",
                            "end": "(?=\\)|,)",
                            "patterns": [
                                {
                                    "include": "#function_parameter_with_default"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "function_parameter_with_default": {
            "patterns": [
                {
                    "name": "entity.function.function_parameter.with_default.bslang",
                    "begin": "(?<=:\\s*)",
                    "end": "(?=\\)|,)",
                    "patterns": [
                        {
                            "begin": "(=)\\s*",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.default_parameter.bslang"
                                }
                            },
                            "end": "(?=\\)|,)",
                            "patterns": [
                                {
                                    "include": "#literal"
                                }
                            ]
                        },
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "literal": {
            "patterns": [
                {
                    "include": "#char_literal"
                },
                {
                    "include": "#numeric_literal"
                },
                {
                    "include": "#builtin_literal"
                },
                {
                    "include": "#array_literal"
                },
                {
                    "include": "#struct_literal"
                }
            ]
        },
        "numeric_literal": {
            "patterns": [
                {
                    "include": "#octal_literal"
                },
                {
                    "include": "#hexadecimal_literal"
                },
                {
                    "include": "#binary_literal"
                },
                {
                    "include": "#decimal_literal"
                }
            ]
        },
        "octal_literal": {
            "name": "constant.numeric.bslang",
            "match": "(0o(?:[0-7]+_?)+)",
            "captures": {
                "1": {
                    "name": "entity.literal.numeric.octal.bslang"
                }
            }
        },
        "hexadecimal_literal": {
            "name": "constant.numeric.bslang",
            "match": "(0x(?:[\\dA-Fa-f]+_?)+)",
            "captures": {
                "1": {
                    "name": "entity.literal.numeric.hexadecimal.bslang"
                }
            }
        },
        "binary_literal": {
            "name": "constant.numeric.bslang",
            "match": "(0b(?:[01]+_?)+)",
            "captures": {
                "1": {
                    "name": "entity.literal.numeric.binary.bslang"
                }
            }
        },
        "decimal_literal": {
            "name": "constant.numeric.bslang",
            "match": "((?:\\d+_?)+)",
            "captures": {
                "1": {
                    "name": "entity.literal.numeric.decimal.bslang"
                }
            }
        },
        "char_literal": {
            "patterns": [
                {
                    "name": "entity.literal.char.empty.invalid.bslang",
                    "match": "('')",
                    "captures": {
                        "1": {
                            "name": "invalid.illegal.bslang"
                        }
                    }
                },
                {
                    "name": "entity.literal.char.invalid.bslang",
                    "match": "(')([\\\\'])(')",
                    "captures": {
                        "0": {
                            "name": "entity.literal.char.invalid.bslang"
                        },
                        "1": {
                            "name": "punctuation.char_literal.bslang"
                        },
                        "2": {
                            "name": "invalid.illegal.bslang"
                        },
                        "3": {
                            "name": "punctuation.char_literal.bslang"
                        }
                    }
                },
                {
                    "name": "entity.literal.char.bslang",
                    "match": "(')([^\\\\'])(')",
                    "captures": {
                        "0": {
                            "name": "entity.literal.char.bslang"
                        },
                        "1": {
                            "name": "punctuation.char_literal.bslang"
                        },
                        "2": {
                            "name": "string.quotes.single.char_literal.bslang"
                        },
                        "3": {
                            "name": "punctuation.char_literal.bslang"
                        }
                    }
                },
                {
                    "name": "entity.literal.char.escaped.bslang",
                    "match": "(')(\\\\[n\\\\tnvfr0'])(')",
                    "captures": {
                        "0": {
                            "name": "entity.literal.char.escaped.bslang"
                        },
                        "1": {
                            "name": "punctuation.char_literal.bslang"
                        },
                        "2": {
                            "name": "constant.character.escape.bslang"
                        },
                        "3": {
                            "name": "punctuation.char_literal.bslang"
                        }
                    }
                },
                {
                    "name": "entity.literal.char.escaped.invalid.bslang",
                    "match": "(')(\\\\[^n\\\\tnvfr0'])(')",
                    "captures": {
                        "0": {
                            "name": "entity.literal.char.escaped.invalid.bslang"
                        },
                        "1": {
                            "name": "punctuation.char_literal.bslang"
                        },
                        "2": {
                            "name": "invalid.illegal.bslang"
                        },
                        "3": {
                            "name": "punctuation.char_literal.bslang"
                        }
                    }
                }
            ]
        },
        "builtin_literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.bslang",
                    "match": "(true|false)"
                },
                {
                    "name": "constant.language.nothing.bslang",
                    "match": "(nothing)"
                }
            ]
        },
        "array_literal": {
            "name": "meta.block.bslang",
            "patterns": [
                {
                    "name": "entity.array.literal.bslang",
                    "begin": "(?<![a-zA-Z0-9_])(\\[)",
                    "end": "(\\])",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.block.array_literal.begin.bslang"
                        },
                        "1": {
                            "name": "meta.brace.square.array_literal.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "meta.block.array_literal.end.bslang"
                        },
                        "1": {
                            "name": "meta.brace.square.array_literal.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#literal"
                        },
                        {
                            "begin": "(,)",
                            "end": ".{0}",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.separator.comma.array_literal.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#literal"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "struct_literal": {
            "name": "meta.block.bslang",
            "patterns": [
                {
                    "name": "entity.struct.literal.bslang",
                    "begin": "([A-Z][a-zA-Z0-9_]*)(\\{)",
                    "end": "(\\})",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.bslang"
                        },
                        "2": {
                            "name": "meta.block.struct_literal.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.struct_literal.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#struct_literal_member"
                        },
                        {
                            "begin": "(,)",
                            "end": ".{0}",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.separator.comma.struct_literal.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#struct_literal_member"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "struct_literal_member": {
            "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)\\s*",
            "name": "entity.struct_field.bslang",
            "end": "(,)|(?=\\})",
            "beginCaptures": {
                "1": {
                    "name": "variable.name.struct_literal.bslang"
                },
                "2": {
                    "name": "punctuation.separator.colon.struct.literal.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.struct_literal.member.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#literal"
                }
            ]
        },
        "function_body": {
            "name": "entity.function.body.bslang",
            "begin": "({)",
            "end": "(})",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.defintion.block.begin.function.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.defintion.block.end.function.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#controll_flow"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#statement"
                }
            ]
        },
        "statement": {
            "patterns": [
                {
                    "include": "#inline_bssembler"
                },
                {
                    "include": "#function_call_statement"
                },
                {
                    "include": "#literal_statement"
                }
            ]
        },
        "function_call_statement": {
            "begin": "^\\s*(?=[a-z])",
            "end": "(;)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.function_call.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#function_call"
                }
            ]
        },
        "literal_statement": {
            "begin": "^\\s*",
            "end": "(;)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.literal.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#literal"
                },
                {
                    "include": "#identifier"
                }
            ]
        },
        "inline_bssembler": {
            "begin": "^\\s*(bsm)\\s+({)",
            "end": "(})",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.bsm.bslang"
                },
                "2": {
                    "name": "punctuation.definition.bsm.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.bsm.bslang"
                }
            },
            "contentName": "meta.embedded.bssembler",
            "patterns": [
                {
                    "include": "source.bssembler"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#variable_declaration_initialization"
                },
                {
                    "include": "#variable_declaration_initialization_without_type"
                },
                {
                    "include": "#variable_declaration"
                },
                {
                    "include": "#variable_assignment"
                }
            ]
        },
        "variable_declaration_initialization": {
            "begin": "^\\s*(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)(?=.*=)",
            "name": "entity.variable.declaration.initialization.bslang",
            "end": "(?<==.*)(;)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.let.bslang"
                },
                "2": {
                    "name": "variable.name.local_variable.bslang"
                },
                "3": {
                    "name": "punctuation.separator.colon.variable_type.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.variable.declaration.bslang"
                }
            },
            "patterns": [
                {
                    "name": "entity.variable.declaration.initialization.type.bslang",
                    "begin": "(?<=:)",
                    "end": "(?==)",
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                {
                    "name": "entity.variable.declaration.initialization.value.bslang",
                    "begin": "(?==)",
                    "end": "(?=;)",
                    "patterns": [
                        {
                            "begin": "(=)\\s*",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.local_variable.initialization.bslang"
                                }
                            },
                            "end": "(?=;)",
                            "patterns": [
                                {
                                    "include": "#rvalue"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "variable_declaration_initialization_without_type": {
            "begin": "^\\s*(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
            "name": "entity.variable.declaration.initialization.without_type.bslang",
            "end": "(;)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.let.bslang"
                },
                "2": {
                    "name": "variable.name.local_variable.bslang"
                },
                "3": {
                    "name": "keyword.operator.assignment.local_variable.initialization.without_type.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.variable.declaration.bslang"
                }
            },
            "patterns": [
                {
                    "begin": "(?<==)",
                    "end": "(?=;)",
                    "patterns": [
                        {
                            "include": "#rvalue"
                        }
                    ]
                }
            ]
        },
        "variable_declaration": {
            "begin": "^\\s*(let)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:)",
            "name": "entity.variable.declaration.bslang",
            "end": "(;)",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.let.bslang"
                },
                "2": {
                    "name": "variable.name.local_variable.bslang"
                },
                "3": {
                    "name": "punctuation.separator.colon.variable_type.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.variable.declaration.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#type"
                }
            ]
        },
        "variable_assignment": {
            "begin": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)\\s*",
            "name": "entity.variable.assignment.bslang",
            "end": "(;)",
            "beginCaptures": {
                "1": {
                    "name": "variable.name.local_variable.bslang"
                },
                "2": {
                    "name": "keyword.operator.assignment.local_variable.bslang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.separator.comma.variable.assigment.bslang"
                }
            },
            "patterns": [
                {
                    "include": "#rvalue"
                }
            ]
        },
        "controll_flow": {
            "patterns": [
                {
                    "include": "#return_statement"
                },
                {
                    "include": "#for_loop"
                }
            ]
        },
        "return_statement": {
            "name": "entity.return.bslang",
            "patterns": [
                {
                    "name": "entity.return.nothing.bslang",
                    "match": "^\\s*(return)\\s*(;)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.return.bslang"
                        },
                        "2": {
                            "name": "punctuation.terminator.return.bslang"
                        }
                    }
                },
                {
                    "name": "entity.return.value.bslang",
                    "begin": "^\\s*(return)\\s+",
                    "end": "(;)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.return.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.return.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#rvalue"
                        }
                    ]
                }
            ]
        },
        "rvalue": {
            "patterns": [
                {
                    "include": "#literal"
                },
                {
                    "include": "#function_call"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#identifier"
                }
            ]
        },
        "function_call": {
            "patterns": [
                {
                    "name": "entity.namespace.usage.bslang",
                    "match": "([a-z][a-zA-Z0-9_]*)(::)",
                    "captures": {
                        "1": {
                            "name": "entity.name.namespace.usage.bslang"
                        },
                        "2": {
                            "name": "punctuation.separator.namespace.access.bslang"
                        }
                    }
                },
                {
                    "include": "#function_call_end"
                }
            ]
        },
        "function_call_end": {
            "patterns": [
                {
                    "name": "entity.function.call.bslang",
                    "begin": "([a-z][a-zA-Z0-9_]*)(\\()",
                    "end": "(\\))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.call.bslang"
                        },
                        "2": {
                            "name": "meta.brace.round.function_call.begin.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "meta.brace.round.function_call.end.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "(?<=\\()|(,)",
                            "end": "(?=,|\\))",
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.separator.comma.function.arguments.bslang"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#rvalue"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "identifier": {
            "patterns": [
                {
                    "name": "variable.name.bslang",
                    "match": "\\b([a-z][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "for_loop": {
            "name": "for.loop.bslang",
            "match": "for ;; {}"
        },
        "namespace": {
            "patterns": [
                {
                    "begin": "(namespace)\\s+([a-z][a-zA-Z0-9_]*)\\s*({)",
                    "end": "(})",
                    "name": "entity.namespace.bslang",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.namespace.bslang"
                        },
                        "2": {
                            "name": "entity.name.namespace.declaration.bslang"
                        },
                        "3": {
                            "name": "punctuation.definition.namespace.bslang"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.namespace.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#import"
                        },
                        {
                            "include": "#struct"
                        },
                        {
                            "include": "#comment"
                        },
                        {
                            "include": "#function"
                        },
                        {
                            "include": "#namespace"
                        }
                    ]
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.bslang",
                    "match": "(\\b(if|else|else if|while|do|loop|break|continue)\\b)"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "include": "#unary_operator"
                },
                {
                    "include": "#binary_operator"
                },
                {
                    "include": "#tertiary_operator"
                }
            ]
        },
        "unary_operator": {
            "patterns": [
                {
                    "begin": "(\\+|\\-|not)",
                    "name": "entity.operator.unary_operator.prefix.bslang",
                    "end": ".{0}",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.unary.prefix.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#rvalue"
                        }
                    ]
                },
                {
                    "begin": "(?=[^\n]*?(?:@|!)).{0}",
                    "name": "entity.operator.unary_operator.postfix.bslang",
                    "end": "(@|!)",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.unary.postfix.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#identifier"
                        },
                        {
                            "include": "#rvalue"
                        }
                    ]
                },
                {
                    "begin": "(\\[)(?=(?:(?:\\d+_?)+))",
                    "name": "entity.operator.unary_operator.postfix.array_index.bslang",
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "keyword.operator.unary.postfix.array_index.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#decimal_literal"
                        }
                    ]
                }
            ]
        },
        "binary_operator": {
            "patterns": [
                {
                    "begin": "(\\+|\\-|\\*|mod|and|or|xor)",
                    "name": "entity.operator.binary_operator.bslang",
                    "end": ".{0}",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.binary.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#rvalue"
                        }
                    ]
                }
            ]
        },
        "tertiary_operator": {
            "patterns": [
                {
                    "begin": ".*(\\?).*(:).*",
                    "name": "entity.operator.tertiary_operator.bslang",
                    "end": ".{0}",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.tertiary.bslang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#rvalue"
                        }
                    ]
                }
            ]
        },
        "string": {
            "name": "string.quoted.double.bslang",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.bslang",
                    "match": "\\\\."
                }
            ]
        }
    }
}
